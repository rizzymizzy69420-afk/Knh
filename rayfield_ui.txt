-- Rayfield UI Library (Fixed for GitHub Raw)
-- Put this exact code in your GitHub raw file

local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local Player = Players.LocalPlayer
local PlayerGui = Player:WaitForChild("PlayerGui")

local Rayfield = {}

-- Configuration
local Config = {
    WindowSize = UDim2.new(0, 580, 0, 460),
    Colors = {
        Background = Color3.fromRGB(25, 25, 25),
        Sidebar = Color3.fromRGB(20, 20, 20),
        Primary = Color3.fromRGB(66, 134, 244),
        Secondary = Color3.fromRGB(40, 40, 40),
        Text = Color3.fromRGB(255, 255, 255),
        SubText = Color3.fromRGB(200, 200, 200),
        Border = Color3.fromRGB(60, 60, 60)
    },
    Animations = {
        Standard = TweenInfo.new(0.3, Enum.EasingStyle.Quint, Enum.EasingDirection.Out),
        Fast = TweenInfo.new(0.15, Enum.EasingStyle.Quint, Enum.EasingDirection.Out)
    }
}

-- Utility Functions
local function CreateTween(object, info, properties)
    return TweenService:Create(object, info, properties)
end

local function CreateCorner(parent, radius)
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, radius or 8)
    corner.Parent = parent
    return corner
end

local function CreateStroke(parent, color, thickness)
    local stroke = Instance.new("UIStroke")
    stroke.Color = color or Config.Colors.Border
    stroke.Thickness = thickness or 1
    stroke.Parent = parent
    return stroke
end

-- Main Library Functions
function Rayfield:CreateWindow(windowConfig)
    local Window = {
        Tabs = {},
        CurrentTab = nil
    }
    
    -- Destroy existing GUI if it exists
    local existingGui = PlayerGui:FindFirstChild("RayfieldUI")
    if existingGui then
        existingGui:Destroy()
    end
    
    -- Create ScreenGui
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "RayfieldUI"
    ScreenGui.ResetOnSpawn = false
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    ScreenGui.IgnoreGuiInset = true
    ScreenGui.Parent = PlayerGui
    
    -- Main Frame
    local MainFrame = Instance.new("Frame")
    MainFrame.Name = "MainFrame"
    MainFrame.Size = Config.WindowSize
    MainFrame.Position = UDim2.new(0.5, -290, 0.5, -230)
    MainFrame.BackgroundColor3 = Config.Colors.Background
    MainFrame.BorderSizePixel = 0
    MainFrame.Active = true
    MainFrame.Parent = ScreenGui
    CreateCorner(MainFrame, 12)
    CreateStroke(MainFrame, Config.Colors.Border, 1)
    
    -- Title Bar
    local TitleBar = Instance.new("Frame")
    TitleBar.Name = "TitleBar"
    TitleBar.Size = UDim2.new(1, 0, 0, 50)
    TitleBar.BackgroundColor3 = Config.Colors.Sidebar
    TitleBar.BorderSizePixel = 0
    TitleBar.Active = true
    TitleBar.Parent = MainFrame
    CreateCorner(TitleBar, 12)
    
    -- Fix the corner overlap
    local TitleBarCornerFix = Instance.new("Frame")
    TitleBarCornerFix.Size = UDim2.new(1, 0, 0, 12)
    TitleBarCornerFix.Position = UDim2.new(0, 0, 1, -12)
    TitleBarCornerFix.BackgroundColor3 = Config.Colors.Sidebar
    TitleBarCornerFix.BorderSizePixel = 0
    TitleBarCornerFix.Parent = TitleBar
    
    local TitleLabel = Instance.new("TextLabel")
    TitleLabel.Name = "Title"
    TitleLabel.Size = UDim2.new(1, -70, 1, 0)
    TitleLabel.Position = UDim2.new(0, 20, 0, 0)
    TitleLabel.BackgroundTransparency = 1
    TitleLabel.Text = windowConfig.Name or "Rayfield"
    TitleLabel.TextColor3 = Config.Colors.Text
    TitleLabel.TextSize = 18
    TitleLabel.Font = Enum.Font.GothamBold
    TitleLabel.TextXAlignment = Enum.TextXAlignment.Left
    TitleLabel.TextYAlignment = Enum.TextYAlignment.Center
    TitleLabel.Parent = TitleBar
    
    -- Close Button
    local CloseButton = Instance.new("TextButton")
    CloseButton.Name = "Close"
    CloseButton.Size = UDim2.new(0, 30, 0, 30)
    CloseButton.Position = UDim2.new(1, -40, 0.5, -15)
    CloseButton.BackgroundColor3 = Color3.fromRGB(255, 100, 100)
    CloseButton.BorderSizePixel = 0
    CloseButton.Text = "Ã—"
    CloseButton.TextColor3 = Config.Colors.Text
    CloseButton.TextSize = 18
    CloseButton.Font = Enum.Font.GothamBold
    CloseButton.Active = true
    CloseButton.Parent = TitleBar
    CreateCorner(CloseButton, 6)
    
    -- Sidebar
    local Sidebar = Instance.new("ScrollingFrame")
    Sidebar.Name = "Sidebar"
    Sidebar.Size = UDim2.new(0, 150, 1, -50)
    Sidebar.Position = UDim2.new(0, 0, 0, 50)
    Sidebar.BackgroundColor3 = Config.Colors.Sidebar
    Sidebar.BorderSizePixel = 0
    Sidebar.ScrollBarThickness = 0
    Sidebar.CanvasSize = UDim2.new(0, 0, 0, 0)
    Sidebar.Parent = MainFrame
    
    local SidebarList = Instance.new("UIListLayout")
    SidebarList.SortOrder = Enum.SortOrder.LayoutOrder
    SidebarList.Padding = UDim.new(0, 5)
    SidebarList.Parent = Sidebar
    
    local SidebarPadding = Instance.new("UIPadding")
    SidebarPadding.PaddingTop = UDim.new(0, 10)
    SidebarPadding.PaddingBottom = UDim.new(0, 10)
    SidebarPadding.PaddingLeft = UDim.new(0, 10)
    SidebarPadding.PaddingRight = UDim.new(0, 10)
    SidebarPadding.Parent = Sidebar
    
    -- Auto-resize sidebar canvas
    SidebarList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
        Sidebar.CanvasSize = UDim2.new(0, 0, 0, SidebarList.AbsoluteContentSize.Y + 20)
    end)
    
    -- Content Area
    local Content = Instance.new("Frame")
    Content.Name = "Content"
    Content.Size = UDim2.new(1, -150, 1, -50)
    Content.Position = UDim2.new(0, 150, 0, 50)
    Content.BackgroundTransparency = 1
    Content.Parent = MainFrame
    
    -- Fixed Dragging functionality
    local dragging = false
    local dragStart = nil
    local startPos = nil
    
    local function onInputBegan(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = MainFrame.Position
            
            local connection
            connection = input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                    connection:Disconnect()
                end
            end)
        end
    end
    
    TitleBar.InputBegan:Connect(onInputBegan)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local delta = input.Position - dragStart
            MainFrame.Position = UDim2.new(
                startPos.X.Scale, 
                startPos.X.Offset + delta.X, 
                startPos.Y.Scale, 
                startPos.Y.Offset + delta.Y
            )
        end
    end)
    
    -- Close button functionality
    CloseButton.MouseButton1Click:Connect(function()
        CreateTween(MainFrame, Config.Animations.Standard, {
            Size = UDim2.new(0, 0, 0, 0),
            Position = UDim2.new(0.5, 0, 0.5, 0)
        }):Play()
        
        wait(0.3)
        ScreenGui:Destroy()
    end)
    
    -- Window methods
    function Window:CreateTab(tabConfig)
        local Tab = {
            Elements = {},
            Container = nil,
            Button = nil
        }
        
        -- Tab Button
        local TabButton = Instance.new("TextButton")
        TabButton.Name = tabConfig.Name
        TabButton.Size = UDim2.new(1, 0, 0, 35)
        TabButton.BackgroundColor3 = Config.Colors.Secondary
        TabButton.BorderSizePixel = 0
        TabButton.Text = tabConfig.Name
        TabButton.TextColor3 = Config.Colors.SubText
        TabButton.TextSize = 14
        TabButton.Font = Enum.Font.Gotham
        TabButton.Active = true
        TabButton.Parent = Sidebar
        CreateCorner(TabButton, 6)
        
        -- Hover effects
        TabButton.MouseEnter:Connect(function()
            if Window.CurrentTab ~= Tab then
                CreateTween(TabButton, Config.Animations.Fast, {
                    BackgroundColor3 = Color3.fromRGB(50, 50, 50)
                }):Play()
            end
        end)
        
        TabButton.MouseLeave:Connect(function()
            if Window.CurrentTab ~= Tab then
                CreateTween(TabButton, Config.Animations.Fast, {
                    BackgroundColor3 = Config.Colors.Secondary
                }):Play()
            end
        end)
        
        -- Tab Content
        local TabContent = Instance.new("ScrollingFrame")
        TabContent.Name = tabConfig.Name .. "Content"
        TabContent.Size = UDim2.new(1, -20, 1, -20)
        TabContent.Position = UDim2.new(0, 10, 0, 10)
        TabContent.BackgroundTransparency = 1
        TabContent.ScrollBarThickness = 4
        TabContent.ScrollBarImageColor3 = Config.Colors.Primary
        TabContent.CanvasSize = UDim2.new(0, 0, 0, 0)
        TabContent.Visible = false
        TabContent.Active = true
        TabContent.Parent = Content
        
        local ContentList = Instance.new("UIListLayout")
        ContentList.SortOrder = Enum.SortOrder.LayoutOrder
        ContentList.Padding = UDim.new(0, 10)
        ContentList.Parent = TabContent
        
        -- Auto-resize canvas
        ContentList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            TabContent.CanvasSize = UDim2.new(0, 0, 0, ContentList.AbsoluteContentSize.Y + 20)
        end)
        
        Tab.Container = TabContent
        Tab.Button = TabButton
        
        -- Tab switching
        TabButton.MouseButton1Click:Connect(function()
            -- Hide all tabs
            for _, tab in pairs(Window.Tabs) do
                tab.Container.Visible = false
                CreateTween(tab.Button, Config.Animations.Fast, {
                    BackgroundColor3 = Config.Colors.Secondary,
                    TextColor3 = Config.Colors.SubText
                }):Play()
            end
            
            -- Show selected tab
            TabContent.Visible = true
            Window.CurrentTab = Tab
            CreateTween(TabButton, Config.Animations.Fast, {
                BackgroundColor3 = Config.Colors.Primary,
                TextColor3 = Config.Colors.Text
            }):Play()
        end)
        
        -- Tab methods
        function Tab:CreateButton(buttonConfig)
            local ButtonFrame = Instance.new("Frame")
            ButtonFrame.Name = "ButtonFrame"
            ButtonFrame.Size = UDim2.new(1, 0, 0, 40)
            ButtonFrame.BackgroundTransparency = 1
            ButtonFrame.Parent = TabContent
            
            local Button = Instance.new("TextButton")
            Button.Name = "Button"
            Button.Size = UDim2.new(1, 0, 1, 0)
            Button.BackgroundColor3 = Config.Colors.Secondary
            Button.BorderSizePixel = 0
            Button.Text = buttonConfig.Name
            Button.TextColor3 = Config.Colors.Text
            Button.TextSize = 14
            Button.Font = Enum.Font.Gotham
            Button.Active = true
            Button.Parent = ButtonFrame
            CreateCorner(Button, 6)
            
            -- Button hover effects
            Button.MouseEnter:Connect(function()
                CreateTween(Button, Config.Animations.Fast, {
                    BackgroundColor3 = Color3.fromRGB(50, 50, 50)
                }):Play()
            end)
            
            Button.MouseLeave:Connect(function()
                CreateTween(Button, Config.Animations.Fast, {
                    BackgroundColor3 = Config.Colors.Secondary
                }):Play()
            end)
            
            Button.MouseButton1Click:Connect(function()
                CreateTween(Button, Config.Animations.Fast, {BackgroundColor3 = Config.Colors.Primary}):Play()
                task.wait(0.1)
                CreateTween(Button, Config.Animations.Fast, {BackgroundColor3 = Config.Colors.Secondary}):Play()
                
                if buttonConfig.Callback then
                    task.spawn(buttonConfig.Callback)
                end
            end)
            
            return Button
        end
        
        function Tab:CreateToggle(toggleConfig)
            local ToggleFrame = Instance.new("Frame")
            ToggleFrame.Name = "Toggle"
            ToggleFrame.Size = UDim2.new(1, 0, 0, 50)
            ToggleFrame.BackgroundColor3 = Config.Colors.Secondary
            ToggleFrame.BorderSizePixel = 0
            ToggleFrame.Parent = TabContent
            CreateCorner(ToggleFrame, 6)
            
            local ToggleLabel = Instance.new("TextLabel")
            ToggleLabel.Size = UDim2.new(1, -60, 1, 0)
            ToggleLabel.Position = UDim2.new(0, 15, 0, 0)
            ToggleLabel.BackgroundTransparency = 1
            ToggleLabel.Text = toggleConfig.Name
            ToggleLabel.TextColor3 = Config.Colors.Text
            ToggleLabel.TextSize = 14
            ToggleLabel.Font = Enum.Font.Gotham
            ToggleLabel.TextXAlignment = Enum.TextXAlignment.Left
            ToggleLabel.TextYAlignment = Enum.TextYAlignment.Center
            ToggleLabel.Parent = ToggleFrame
            
            local ToggleButton = Instance.new("TextButton")
            ToggleButton.Size = UDim2.new(0, 40, 0, 20)
            ToggleButton.Position = UDim2.new(1, -50, 0.5, -10)
            ToggleButton.BackgroundColor3 = Config.Colors.Border
            ToggleButton.BorderSizePixel = 0
            ToggleButton.Text = ""
            ToggleButton.Active = true
            ToggleButton.Parent = ToggleFrame
            CreateCorner(ToggleButton, 10)
            
            local ToggleIndicator = Instance.new("Frame")
            ToggleIndicator.Size = UDim2.new(0, 16, 0, 16)
            ToggleIndicator.Position = UDim2.new(0, 2, 0.5, -8)
            ToggleIndicator.BackgroundColor3 = Config.Colors.Text
            ToggleIndicator.BorderSizePixel = 0
            ToggleIndicator.Parent = ToggleButton
            CreateCorner(ToggleIndicator, 8)
            
            local isToggled = toggleConfig.Default or false
            
            local function updateToggle()
                if isToggled then
                    CreateTween(ToggleButton, Config.Animations.Fast, {BackgroundColor3 = Config.Colors.Primary}):Play()
                    CreateTween(ToggleIndicator, Config.Animations.Fast, {Position = UDim2.new(1, -18, 0.5, -8)}):Play()
                else
                    CreateTween(ToggleButton, Config.Animations.Fast, {BackgroundColor3 = Config.Colors.Border}):Play()
                    CreateTween(ToggleIndicator, Config.Animations.Fast, {Position = UDim2.new(0, 2, 0.5, -8)}):Play()
                end
            end
            
            ToggleButton.MouseButton1Click:Connect(function()
                isToggled = not isToggled
                updateToggle()
                
                if toggleConfig.Callback then
                    task.spawn(toggleConfig.Callback, isToggled)
                end
            end)
            
            updateToggle()
            return ToggleFrame
        end
        
        function Tab:CreateSlider(sliderConfig)
            local SliderFrame = Instance.new("Frame")
            SliderFrame.Name = "Slider"
            SliderFrame.Size = UDim2.new(1, 0, 0, 70)
            SliderFrame.BackgroundColor3 = Config.Colors.Secondary
            SliderFrame.BorderSizePixel = 0
            SliderFrame.Parent = TabContent
            CreateCorner(SliderFrame, 6)
            
            local SliderLabel = Instance.new("TextLabel")
            SliderLabel.Size = UDim2.new(1, -60, 0, 30)
            SliderLabel.Position = UDim2.new(0, 15, 0, 5)
            SliderLabel.BackgroundTransparency = 1
            SliderLabel.Text = sliderConfig.Name
            SliderLabel.TextColor3 = Config.Colors.Text
            SliderLabel.TextSize = 14
            SliderLabel.Font = Enum.Font.Gotham
            SliderLabel.TextXAlignment = Enum.TextXAlignment.Left
            SliderLabel.TextYAlignment = Enum.TextYAlignment.Center
            SliderLabel.Parent = SliderFrame
            
            local SliderValue = Instance.new("TextLabel")
            SliderValue.Size = UDim2.new(0, 50, 0, 30)
            SliderValue.Position = UDim2.new(1, -60, 0, 5)
            SliderValue.BackgroundTransparency = 1
            SliderValue.Text = tostring(sliderConfig.Min)
            SliderValue.TextColor3 = Config.Colors.Primary
            SliderValue.TextSize = 12
            SliderValue.Font = Enum.Font.GothamBold
            SliderValue.TextXAlignment = Enum.TextXAlignment.Right
            SliderValue.TextYAlignment = Enum.TextYAlignment.Center
            SliderValue.Parent = SliderFrame
            
            local SliderTrack = Instance.new("Frame")
            SliderTrack.Size = UDim2.new(1, -30, 0, 6)
            SliderTrack.Position = UDim2.new(0, 15, 1, -20)
            SliderTrack.BackgroundColor3 = Config.Colors.Border
            SliderTrack.BorderSizePixel = 0
            SliderTrack.Parent = SliderFrame
            CreateCorner(SliderTrack, 3)
            
            local SliderFill = Instance.new("Frame")
            SliderFill.Size = UDim2.new(0, 0, 1, 0)
            SliderFill.BackgroundColor3 = Config.Colors.Primary
            SliderFill.BorderSizePixel = 0
            SliderFill.Parent = SliderTrack
            CreateCorner(SliderFill, 3)
            
            local SliderButton = Instance.new("TextButton")
            SliderButton.Size = UDim2.new(0, 18, 0, 18)
            SliderButton.Position = UDim2.new(0, -9, 0.5, -9)
            SliderButton.BackgroundColor3 = Config.Colors.Primary
            SliderButton.BorderSizePixel = 0
            SliderButton.Text = ""
            SliderButton.Active = true
            SliderButton.Parent = SliderTrack
            CreateCorner(SliderButton, 9)
            
            local currentValue = sliderConfig.Min or 0
            local dragging = false
            
            local function updateSlider(value)
                local min = sliderConfig.Min or 0
                local max = sliderConfig.Max or 100
                value = math.clamp(value, min, max)
                
                local percentage = (value - min) / (max - min)
                SliderFill.Size = UDim2.new(percentage, 0, 1, 0)
                SliderButton.Position = UDim2.new(percentage, -9, 0.5, -9)
                SliderValue.Text = tostring(math.floor(value + 0.5))
                currentValue = value
                
                if sliderConfig.Callback then
                    task.spawn(sliderConfig.Callback, value)
                end
            end
            
            local function onSliderInput(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
                    dragging = true
                    
                    local connection
                    connection = input.Changed:Connect(function()
                        if input.UserInputState == Enum.UserInputState.End then
                            dragging = false
                            connection:Disconnect()
                        end
                    end)
                end
            end
            
            SliderButton.InputBegan:Connect(onSliderInput)
            SliderTrack.InputBegan:Connect(onSliderInput)
            
            UserInputService.InputChanged:Connect(function(input)
                if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
                    local mousePos = UserInputService:GetMouseLocation().X
                    local trackPos = SliderTrack.AbsolutePosition.X
                    local trackSize = SliderTrack.AbsoluteSize.X
                    local percentage = math.clamp((mousePos - trackPos) / trackSize, 0, 1)
                    
                    local min = sliderConfig.Min or 0
                    local max = sliderConfig.Max or 100
                    local newValue = min + (percentage * (max - min))
                    updateSlider(newValue)
                end
            end)
            
            -- Initialize slider
            updateSlider(sliderConfig.Default or sliderConfig.Min or 0)
            return SliderFrame
        end
        
        Window.Tabs[#Window.Tabs + 1] = Tab
        
        -- Auto-select first tab
        if #Window.Tabs == 1 then
            task.wait(0.1)
            TabButton.MouseButton1Click()
        end
        
        return Tab
    end
    
    return Window
end

return Rayfield