-- Ultimate UI Designer Pro - Professional Edition
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")
local TextService = game:GetService("TextService")
local CoreGui = game:GetService("CoreGui")
local StarterGui = game:GetService("StarterGui")

local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

-- Modern color palette
local colors = {
    background = Color3.fromRGB(18, 20, 26),
    primary = Color3.fromRGB(0, 170, 255),
    secondary = Color3.fromRGB(35, 40, 55),
    accent = Color3.fromRGB(255, 85, 127),
    text = Color3.fromRGB(240, 240, 240),
    darkText = Color3.fromRGB(30, 30, 30),
    success = Color3.fromRGB(85, 255, 170),
    warning = Color3.fromRGB(255, 200, 100),
    error = Color3.fromRGB(255, 85, 85),
    highlight = Color3.fromRGB(100, 200, 255),
    panel = Color3.fromRGB(30, 33, 40),
    sidebar = Color3.fromRGB(25, 27, 35),
    propertyHeader = Color3.fromRGB(45, 50, 65),
    propertyItem = Color3.fromRGB(40, 45, 60)
}

-- Modern glass effect function
local function createGlassFrame(parent, size, position, transparency)
    local frame = Instance.new("Frame")
    frame.Size = size
    frame.Position = position
    frame.BackgroundColor3 = colors.panel
    frame.BackgroundTransparency = transparency or 0.1
    frame.BorderSizePixel = 0
    frame.Parent = parent
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 12)
    corner.Parent = frame
    
    local stroke = Instance.new("UIStroke")
    stroke.Color = Color3.fromRGB(70, 80, 100)
    stroke.Thickness = 1
    stroke.Transparency = 0.7
    stroke.Parent = frame
    
    return frame
end

-- Main UI Designer GUI
local designerGui = Instance.new("ScreenGui")
designerGui.Name = "UIDesignerPro"
designerGui.ResetOnSpawn = false
designerGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
designerGui.Parent = CoreGui

-- Main Container with Glass Morphism Effect
local mainContainer = createGlassFrame(designerGui, UDim2.new(0, 800, 0, 650), UDim2.new(0.5, -400, 0.5, -325))

-- Drop Shadow
local shadow = Instance.new("ImageLabel")
shadow.Name = "Shadow"
shadow.Size = UDim2.new(1, 30, 1, 30)
shadow.Position = UDim2.new(0, -15, 0, -15)
shadow.Image = "rbxassetid://1316045217"
shadow.ImageColor3 = Color3.fromRGB(0, 0, 0)
shadow.ImageTransparency = 0.8
shadow.ScaleType = Enum.ScaleType.Slice
shadow.SliceCenter = Rect.new(10, 10, 118, 118)
shadow.ZIndex = -1
shadow.Parent = mainContainer

-- Title Bar
local titleBar = Instance.new("Frame")
titleBar.Name = "TitleBar"
titleBar.Size = UDim2.new(1, 0, 0, 40)
titleBar.BackgroundColor3 = colors.primary
titleBar.BorderSizePixel = 0
titleBar.Parent = mainContainer

local titleCorner = Instance.new("UICorner")
titleCorner.CornerRadius = UDim.new(0, 12)
titleCorner.Parent = titleBar

-- Title Text
local titleText = Instance.new("TextLabel")
titleText.Name = "TitleText"
titleText.Size = UDim2.new(1, -100, 1, 0)
titleText.Position = UDim2.new(0, 20, 0, 0)
titleText.Text = "UI DESIGNER PRO - Professional Edition"
titleText.TextColor3 = colors.text
titleText.BackgroundTransparency = 1
titleText.Font = Enum.Font.GothamBold
titleText.TextSize = 18
titleText.TextXAlignment = Enum.TextXAlignment.Left
titleText.Parent = titleBar

-- Control Buttons
local controlButtons = Instance.new("Frame")
controlButtons.Name = "ControlButtons"
controlButtons.Size = UDim2.new(0, 100, 0, 30)
controlButtons.Position = UDim2.new(1, -110, 0, 5)
controlButtons.BackgroundTransparency = 1
controlButtons.Parent = titleBar

-- Minimize Button
local minimizeButton = Instance.new("TextButton")
minimizeButton.Name = "MinimizeButton"
minimizeButton.Size = UDim2.new(0, 30, 0, 30)
minimizeButton.Position = UDim2.new(0, 0, 0, 0)
minimizeButton.Text = "‚îÄ"
minimizeButton.TextColor3 = colors.text
minimizeButton.BackgroundColor3 = colors.secondary
minimizeButton.Font = Enum.Font.GothamBold
minimizeButton.TextSize = 16
minimizeButton.Parent = controlButtons

local minimizeCorner = Instance.new("UICorner")
minimizeCorner.CornerRadius = UDim.new(0, 6)
minimizeCorner.Parent = minimizeButton

-- Close Button
local closeButton = Instance.new("TextButton")
closeButton.Name = "CloseButton"
closeButton.Size = UDim2.new(0, 30, 0, 30)
closeButton.Position = UDim2.new(0, 40, 0, 0)
closeButton.Text = "‚úï"
closeButton.TextColor3 = colors.text
closeButton.BackgroundColor3 = colors.accent
closeButton.Font = Enum.Font.GothamBold
closeButton.TextSize = 14
closeButton.Parent = controlButtons

local closeCorner = Instance.new("UICorner")
closeCorner.CornerRadius = UDim.new(0, 6)
closeCorner.Parent = closeButton

-- Button hover effects
local function addHoverEffect(button, hoverColor, normalColor)
    button.MouseEnter:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = hoverColor}):Play()
    end)
    
    button.MouseLeave:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = normalColor}):Play()
    end)
end

addHoverEffect(closeButton, Color3.fromRGB(255, 100, 130), colors.accent)
addHoverEffect(minimizeButton, Color3.fromRGB(100, 110, 130), colors.secondary)

-- Sidebar Navigation
local sidebar = createGlassFrame(mainContainer, UDim2.new(0, 80, 1, -50), UDim2.new(0, 10, 0, 50))
sidebar.BackgroundColor3 = colors.sidebar

-- Tabs
local tabs = {
    {name = "Create", icon = "üõ†Ô∏è", tooltip = "Create Elements"},
    {name = "Explorer", icon = "üìÅ", tooltip = "UI Hierarchy"},
    {name = "Properties", icon = "üìù", tooltip = "Element Properties"},
    {name = "Scripts", icon = "üíª", tooltip = "Script Editor"},
    {name = "Export", icon = "üì§", tooltip = "Export Options"}
}

local tabButtons = {}
local tabContents = {}

-- Content area
local contentFrame = createGlassFrame(mainContainer, UDim2.new(1, -110, 1, -70), UDim2.new(0, 100, 0, 50))
contentFrame.BackgroundTransparency = 0.05

-- Create tab buttons
for i, tab in ipairs(tabs) do
    local tabButton = Instance.new("TextButton")
    tabButton.Name = tab.name .. "Tab"
    tabButton.Size = UDim2.new(0.8, 0, 0, 60)
    tabButton.Position = UDim2.new(0.1, 0, 0, 20 + (i-1) * 70)
    tabButton.Text = tab.icon
    tabButton.TextColor3 = i == 1 and colors.primary or Color3.fromRGB(180, 180, 180)
    tabButton.BackgroundColor3 = i == 1 and Color3.fromRGB(40, 45, 60) or Color3.new(0,0,0,0)
    tabButton.BackgroundTransparency = i == 1 and 0.8 or 1
    tabButton.Font = Enum.Font.GothamMedium
    tabButton.TextSize = 24
    tabButton.Parent = sidebar
    
    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0, 8)
    buttonCorner.Parent = tabButton
    
    -- Add hover effect
    tabButton.MouseEnter:Connect(function()
        if tabButton.TextColor3 ~= colors.primary then
            TweenService:Create(tabButton, TweenInfo.new(0.2), {BackgroundTransparency = 0.8, BackgroundColor3 = Color3.fromRGB(40, 45, 60)}):Play()
        end
    end)
    
    tabButton.MouseLeave:Connect(function()
        if tabButton.TextColor3 ~= colors.primary then
            TweenService:Create(tabButton, TweenInfo.new(0.2), {BackgroundTransparency = 1}):Play()
        end
    end)
    
    -- Tooltip
    local tooltip = Instance.new("TextLabel")
    tooltip.Text = tab.tooltip
    tooltip.Size = UDim2.new(0, 120, 0, 30)
    tooltip.Position = UDim2.new(1, 10, 0.5, -15)
    tooltip.BackgroundColor3 = colors.panel
    tooltip.TextColor3 = colors.text
    tooltip.Font = Enum.Font.Gotham
    tooltip.TextSize = 12
    tooltip.Visible = false
    tooltip.ZIndex = 100
    tooltip.Parent = tabButton
    
    local tipCorner = Instance.new("UICorner")
    tipCorner.CornerRadius = UDim.new(0, 6)
    tipCorner.Parent = tooltip
    
    tabButton.MouseEnter:Connect(function()
        tooltip.Visible = true
    end)
    
    tabButton.MouseLeave:Connect(function()
        tooltip.Visible = false
    end)
    
    tabButtons[tab.name] = tabButton
    
    -- Tab content
    local tabContent = Instance.new("ScrollingFrame")
    tabContent.Name = tab.name .. "Content"
    tabContent.Size = UDim2.new(1, -20, 1, -20)
    tabContent.Position = UDim2.new(0, 10, 0, 10)
    tabContent.BackgroundTransparency = 1
    tabContent.ScrollBarThickness = 8
    tabContent.ScrollBarImageColor3 = Color3.fromRGB(100, 100, 100)
    tabContent.BorderSizePixel = 0
    tabContent.CanvasSize = UDim2.new(0, 0, 0, 0)
    tabContent.Visible = i == 1
    tabContent.AutomaticCanvasSize = Enum.AutomaticSize.Y
    tabContent.Parent = contentFrame
    
    tabContents[tab.name] = tabContent
end

-- Dragging functionality for main window
local dragging = false
local dragStart = nil
local startPos = nil

local function onMainDragStart(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = true
        dragStart = input.Position
        startPos = mainContainer.Position
    end
end

local function onMainDrag(input)
    if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
        local delta = input.Position - dragStart
        mainContainer.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end

local function onMainDragEnd(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        dragging = false
    end
end

titleBar.InputBegan:Connect(onMainDragStart)
UserInputService.InputChanged:Connect(onMainDrag)
UserInputService.InputEnded:Connect(onMainDragEnd)

-- Minimize functionality
local isMinimized = false
local originalSize = mainContainer.Size

minimizeButton.MouseButton1Click:Connect(function()
    isMinimized = not isMinimized
    if isMinimized then
        originalSize = mainContainer.Size
        local tween = TweenService:Create(mainContainer, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {Size = UDim2.new(0, 800, 0, 40)})
        tween:Play()
        minimizeButton.Text = "+"
    else
        local tween = TweenService:Create(mainContainer, TweenInfo.new(0.3, Enum.EasingStyle.Quad), {Size = originalSize})
        tween:Play()
        minimizeButton.Text = "‚îÄ"
    end
end)

closeButton.MouseButton1Click:Connect(function()
    local tween = TweenService:Create(mainContainer, TweenInfo.new(0.2), {Size = UDim2.new(0, 0, 0, 0)})
    tween:Play()
    tween.Completed:Wait()
    designerGui:Destroy()
end)

-- Tab switching function
local currentTab = "Create"

local function switchTab(tabName)
    currentTab = tabName
    
    -- Update tab buttons
    for name, button in pairs(tabButtons) do
        if name == tabName then
            button.TextColor3 = colors.primary
            TweenService:Create(button, TweenInfo.new(0.2), {BackgroundTransparency = 0.8, BackgroundColor3 = Color3.fromRGB(40, 45, 60)}):Play()
        else
            button.TextColor3 = Color3.fromRGB(180, 180, 180)
            TweenService:Create(button, TweenInfo.new(0.2), {BackgroundTransparency = 1}):Play()
        end
    end
    
    -- Update tab visibility
    for name, content in pairs(tabContents) do
        content.Visible = name == tabName
    end
    
    -- Refresh content when switching to certain tabs
    if tabName == "Explorer" then
        refreshExplorer()
    elseif tabName == "Properties" then
        refreshProperties()
    end
end

-- Connect tab buttons
for name, button in pairs(tabButtons) do
    button.MouseButton1Click:Connect(function()
        switchTab(name)
    end)
end

-- Create UI Elements
local createElements = {
    Frame = {Name = "Frame", Icon = "‚¨ú", Description = "Container element", Class = "Frame"},
    TextLabel = {Name = "TextLabel", Icon = "üìù", Description = "Text display", Class = "TextLabel"},
    TextButton = {Name = "TextButton", Icon = "üîò", Description = "Interactive button", Class = "TextButton"},
    TextBox = {Name = "TextBox", Icon = "‚úèÔ∏è", Description = "Text input field", Class = "TextBox"},
    ImageLabel = {Name = "ImageLabel", Icon = "üñºÔ∏è", Description = "Image display", Class = "ImageLabel"},
    ScrollingFrame = {Name = "ScrollingFrame", Icon = "üìú", Description = "Scrollable container", Class = "ScrollingFrame"},
    UIListLayout = {Name = "UIListLayout", Icon = "üìã", Description = "List arrangement", Class = "UIListLayout"},
    UIGridLayout = {Name = "UIGridLayout", Icon = "üî≤", Description = "Grid arrangement", Class = "UIGridLayout"},
    UIPadding = {Name = "UIPadding", Icon = "üìè", Description = "Padding control", Class = "UIPadding"},
    UICorner = {Name = "UICorner", Icon = "üîµ", Description = "Rounded corners", Class = "UICorner"},
    UIStroke = {Name = "UIStroke", Icon = "üñåÔ∏è", Description = "Border/stroke effect", Class = "UIStroke"}
}

-- Populate Create Tab
local createContent = tabContents["Create"]
local yPos = 10

for elementType, properties in pairs(createElements) do
    local button = Instance.new("TextButton")
    button.Name = elementType .. "Button"
    button.Size = UDim2.new(1, -40, 0, 80)
    button.Position = UDim2.new(0, 20, 0, yPos)
    button.Text = ""
    button.TextColor3 = colors.text
    button.BackgroundColor3 = Color3.fromRGB(40, 45, 60)
    button.BorderSizePixel = 0
    button.Font = Enum.Font.Gotham
    button.TextSize = 12
    button.LayoutOrder = yPos
    button.Parent = createContent
    
    local buttonCorner = Instance.new("UICorner")
    buttonCorner.CornerRadius = UDim.new(0, 10)
    buttonCorner.Parent = button
    
    local buttonStroke = Instance.new("UIStroke")
    buttonStroke.Color = Color3.fromRGB(80, 90, 110)
    buttonStroke.Thickness = 1
    buttonStroke.Parent = button
    
    -- Icon
    local icon = Instance.new("TextLabel")
    icon.Size = UDim2.new(0, 50, 0, 50)
    icon.Position = UDim2.new(0, 15, 0.5, -25)
    icon.Text = properties.Icon
    icon.TextColor3 = colors.primary
    icon.BackgroundTransparency = 1
    icon.Font = Enum.Font.GothamBold
    icon.TextSize = 30
    icon.Parent = button
    
    -- Title
    local title = Instance.new("TextLabel")
    title.Size = UDim2.new(1, -80, 0, 30)
    title.Position = UDim2.new(0, 75, 0, 15)
    title.Text = properties.Name
    title.TextColor3 = colors.text
    title.BackgroundTransparency = 1
    title.Font = Enum.Font.GothamBold
    title.TextSize = 16
    title.TextXAlignment = Enum.TextXAlignment.Left
    title.Parent = button
    
    -- Description
    local desc = Instance.new("TextLabel")
    desc.Size = UDim2.new(1, -80, 0, 30)
    desc.Position = UDim2.new(0, 75, 0, 40)
    desc.Text = properties.Description
    desc.TextColor3 = Color3.fromRGB(180, 180, 180)
    desc.BackgroundTransparency = 1
    desc.Font = Enum.Font.Gotham
    desc.TextSize = 12
    desc.TextXAlignment = Enum.TextXAlignment.Left
    desc.Parent = button
    
    -- Hover effect
    button.MouseEnter:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(50, 55, 70)}):Play()
    end)
    
    button.MouseLeave:Connect(function()
        TweenService:Create(button, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(40, 45, 60)}):Play()
    end)
    
    button.MouseButton1Click:Connect(function()
        createUIElement(properties.Class)
    end)
    
    yPos = yPos + 90
end

-- UI Canvas for created elements
local uiCanvas = Instance.new("ScreenGui")
uiCanvas.Name = "UICanvas"
uiCanvas.ResetOnSpawn = false
uiCanvas.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
uiCanvas.Parent = playerGui

-- Currently selected element
local selectedElement = nil
local dragHandleSize = 24 -- Larger handles for better mobile interaction
local selectionBox = nil

-- Function to create UI elements
function createUIElement(elementType)
    local newElement = Instance.new(elementType)
    newElement.Name = "New" .. elementType
    
    -- Set default properties based on element type
    if elementType == "Frame" then
        newElement.Size = UDim2.new(0, 200, 0, 200)
        newElement.Position = UDim2.new(0.5, -100, 0.5, -100)
        newElement.BackgroundColor3 = Color3.fromRGB(60, 60, 80)
        newElement.BorderSizePixel = 0
        
        -- Add default styling
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 8)
        corner.Parent = newElement
        
        local stroke = Instance.new("UIStroke")
        stroke.Color = Color3.fromRGB(100, 100, 120)
        stroke.Thickness = 2
        stroke.Parent = newElement
    elseif elementType == "TextLabel" then
        newElement.Size = UDim2.new(0, 200, 0, 60)
        newElement.Position = UDim2.new(0.5, -100, 0.5, -30)
        newElement.BackgroundColor3 = Color3.fromRGB(80, 80, 120)
        newElement.Text = "Text Label"
        newElement.TextColor3 = Color3.fromRGB(255, 255, 255)
        newElement.TextSize = 16
        newElement.Font = Enum.Font.Gotham
        newElement.BorderSizePixel = 0
        
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 8)
        corner.Parent = newElement
    elseif elementType == "TextButton" then
        newElement.Size = UDim2.new(0, 200, 0, 60)
        newElement.Position = UDim2.new(0.5, -100, 0.5, -30)
        newElement.BackgroundColor3 = Color3.fromRGB(60, 120, 200)
        newElement.Text = "Click Me"
        newElement.TextColor3 = Color3.fromRGB(255, 255, 255)
        newElement.TextSize = 16
        newElement.Font = Enum.Font.Gotham
        newElement.BorderSizePixel = 0
        
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 8)
        corner.Parent = newElement
    elseif elementType == "ImageLabel" then
        newElement.Size = UDim2.new(0, 200, 0, 200)
        newElement.Position = UDim2.new(0.5, -100, 0.5, -100)
        newElement.BackgroundColor3 = Color3.fromRGB(80, 80, 100)
        newElement.BorderSizePixel = 0
        newElement.Image = "rbxassetid://111490672" -- Default placeholder image
        
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 8)
        corner.Parent = newElement
    elseif elementType == "ScrollingFrame" then
        newElement.Size = UDim2.new(0, 300, 0, 300)
        newElement.Position = UDim2.new(0.5, -150, 0.5, -150)
        newElement.BackgroundColor3 = Color3.fromRGB(50, 55, 70)
        newElement.BorderSizePixel = 0
        newElement.ScrollBarThickness = 8
        
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 8)
        corner.Parent = newElement
    else
        newElement.Size = UDim2.new(0, 100, 0, 100)
        newElement.Position = UDim2.new(0.5, -50, 0.5, -50)
        newElement.BackgroundTransparency = 1
    end
    
    -- If we have a selected element, parent to it
    if selectedElement and selectedElement:IsA("GuiObject") then
        newElement.Parent = selectedElement
    else
        newElement.Parent = uiCanvas
    end
    
    -- Make element draggable and resizable
    if newElement:IsA("GuiObject") then
        setupElementControls(newElement)
    end
    
    -- Select the new element
    selectElement(newElement)
    
    -- Switch to properties tab
    switchTab("Properties")
    
    -- Refresh explorer
    refreshExplorer()
end

-- Function to set up dragging and resizing for elements
function setupElementControls(element)
    local dragging = false
    local dragStart = nil
    local startPos = nil
    
    local resizing = false
    local resizeStart = nil
    local startSize = nil
    local resizeHandle = nil
    
    -- Create drag handles
    local dragHandles = {}
    
    -- Top-left handle
    local topLeft = createDragHandle("TopLeft", UDim2.new(0, -dragHandleSize/2, 0, -dragHandleSize/2))
    topLeft.Parent = element
    
    -- Top-right handle
    local topRight = createDragHandle("TopRight", UDim2.new(1, -dragHandleSize/2, 0, -dragHandleSize/2))
    topRight.Parent = element
    
    -- Bottom-left handle
    local bottomLeft = createDragHandle("BottomLeft", UDim2.new(0, -dragHandleSize/2, 1, -dragHandleSize/2))
    bottomLeft.Parent = element
    
    -- Bottom-right handle
    local bottomRight = createDragHandle("BottomRight", UDim2.new(1, -dragHandleSize/2, 1, -dragHandleSize/2))
    bottomRight.Parent = element
    
    -- Function to update handle positions
    local function updateHandles()
        topLeft.Position = UDim2.new(0, -dragHandleSize/2, 0, -dragHandleSize/2)
        topRight.Position = UDim2.new(1, -dragHandleSize/2, 0, -dragHandleSize/2)
        bottomLeft.Position = UDim2.new(0, -dragHandleSize/2, 1, -dragHandleSize/2)
        bottomRight.Position = UDim2.new(1, -dragHandleSize/2, 1, -dragHandleSize/2)
    end
    
    updateHandles()
    
    -- Dragging functionality
    element.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = element.Position
            selectElement(element)
        end
    end)
    
    -- Resizing functionality
    local function handleResize(handle, input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            resizing = true
            resizeHandle = handle
            resizeStart = input.Position
            startSize = element.Size
            startPos = element.Position
            selectElement(element)
        end
    end
    
    topLeft.InputBegan:Connect(function(input) handleResize("TopLeft", input) end)
    topRight.InputBegan:Connect(function(input) handleResize("TopRight", input) end)
    bottomLeft.InputBegan:Connect(function(input) handleResize("BottomLeft", input) end)
    bottomRight.InputBegan:Connect(function(input) handleResize("BottomRight", input) end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local delta = input.Position - dragStart
            element.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
        
        if resizing and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local delta = input.Position - resizeStart
            local newSize = startSize
            
            if resizeHandle == "TopLeft" then
                newSize = UDim2.new(
                    newSize.X.Scale, math.max(40, newSize.X.Offset - delta.X),
                    newSize.Y.Scale, math.max(40, newSize.Y.Offset - delta.Y)
                )
                element.Position = UDim2.new(
                    startPos.X.Scale, startPos.X.Offset + delta.X,
                    startPos.Y.Scale, startPos.Y.Offset + delta.Y
                )
            elseif resizeHandle == "TopRight" then
                newSize = UDim2.new(
                    newSize.X.Scale, math.max(40, newSize.X.Offset + delta.X),
                    newSize.Y.Scale, math.max(40, newSize.Y.Offset - delta.Y)
                )
                element.Position = UDim2.new(
                    startPos.X.Scale, startPos.X.Offset,
                    startPos.Y.Scale, startPos.Y.Offset + delta.Y
                )
            elseif resizeHandle == "BottomLeft" then
                newSize = UDim2.new(
                    newSize.X.Scale, math.max(40, newSize.X.Offset - delta.X),
                    newSize.Y.Scale, math.max(40, newSize.Y.Offset + delta.Y)
                )
                element.Position = UDim2.new(
                    startPos.X.Scale, startPos.X.Offset + delta.X,
                    startPos.Y.Scale, startPos.Y.Offset
                )
            elseif resizeHandle == "BottomRight" then
                newSize = UDim2.new(
                    newSize.X.Scale, math.max(40, newSize.X.Offset + delta.X),
                    newSize.Y.Scale, math.max(40, newSize.Y.Offset + delta.Y)
                )
            end
            
            element.Size = newSize
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = false
            resizing = false
        end
    end)
    
    -- Update handles when element changes size
    element:GetPropertyChangedSignal("Size"):Connect(updateHandles)
end

-- Create a drag handle
function createDragHandle(name, position)
    local handle = Instance.new("Frame")
    handle.Name = name
    handle.Size = UDim2.new(0, dragHandleSize, 0, dragHandleSize)
    handle.Position = position
    handle.BackgroundColor3 = colors.highlight
    handle.BorderSizePixel = 0
    handle.ZIndex = 100
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(1, 0)
    corner.Parent = handle
    
    -- Add hover effect to handles
    handle.MouseEnter:Connect(function()
        TweenService:Create(handle, TweenInfo.new(0.2), {Size = UDim2.new(0, dragHandleSize+6, 0, dragHandleSize+6)}):Play()
    end)
    
    handle.MouseLeave:Connect(function()
        TweenService:Create(handle, TweenInfo.new(0.2), {Size = UDim2.new(0, dragHandleSize, 0, dragHandleSize)}):Play()
    end)
    
    return handle
end

-- Function to select an element
function selectElement(element)
    -- Remove selection from previous element
    if selectedElement then
        if selectedElement:FindFirstChild("SelectionBox") then
            selectedElement.SelectionBox:Destroy()
        end
    end
    
    selectedElement = element
    
    if not element then
        return
    end
    
    -- Add selection indicator
    local selectionBox = Instance.new("SelectionBox")
    selectionBox.Name = "SelectionBox"
    selectionBox.Adornee = element
    selectionBox.Color3 = colors.primary
    selectionBox.LineThickness = 0.1
    selectionBox.Parent = element
    
    -- Bring element to front
    if element:IsA("GuiObject") then
        element.ZIndex = 100
    end
    
    -- Refresh properties
    if currentTab == "Properties" then
        refreshProperties()
    end
end

-- UI Explorer
local explorerContent = tabContents["Explorer"]
local explorerTree = Instance.new("Frame")
explorerTree.Name = "ExplorerTree"
explorerTree.Size = UDim2.new(1, 0, 1, 0)
explorerTree.BackgroundTransparency = 1
explorerTree.Parent = explorerContent

local explorerScroll = Instance.new("ScrollingFrame")
explorerScroll.Name = "ExplorerScroll"
explorerScroll.Size = UDim2.new(1, 0, 1, -40)
explorerScroll.BackgroundTransparency = 1
explorerScroll.ScrollBarThickness = 8
explorerScroll.CanvasSize = UDim2.new(0, 0, 0, 0)
explorerScroll.AutomaticCanvasSize = Enum.AutomaticSize.Y
explorerScroll.Parent = explorerTree

local searchBox = Instance.new("TextBox")
searchBox.Name = "SearchBox"
searchBox.Size = UDim2.new(1, -20, 0, 30)
searchBox.Position = UDim2.new(0, 10, 1, -35)
searchBox.PlaceholderText = "üîç Search elements..."
searchBox.Text = ""
searchBox.TextColor3 = colors.text
searchBox.BackgroundColor3 = colors.propertyItem
searchBox.Font = Enum.Font.Gotham
searchBox.TextSize = 14
searchBox.Parent = explorerTree

local searchCorner = Instance.new("UICorner")
searchCorner.CornerRadius = UDim.new(0, 6)
searchCorner.Parent = searchBox

-- Function to refresh the explorer
function refreshExplorer()
    explorerScroll:ClearAllChildren()
    
    local function createTreeItem(element, depth, parentFrame)
        local itemFrame = Instance.new("Frame")
        itemFrame.Size = UDim2.new(1, -depth * 20, 0, 30)
        itemFrame.Position = UDim2.new(0, depth * 20, 0, #parentFrame:GetChildren() * 30)
        itemFrame.BackgroundTransparency = 1
        itemFrame.Parent = parentFrame
        
        local expandButton = Instance.new("TextButton")
        expandButton.Size = UDim2.new(0, 20, 0, 20)
        expandButton.Position = UDim2.new(0, 0, 0.5, -10)
        expandButton.Text = "‚ñ∂"
        expandButton.TextColor3 = colors.text
        expandButton.BackgroundTransparency = 1
        expandButton.Font = Enum.Font.GothamBold
        expandButton.TextSize = 12
        expandButton.Visible = #element:GetChildren() > 0
        expandButton.Parent = itemFrame
        
        local icon = Instance.new("TextLabel")
        icon.Size = UDim2.new(0, 20, 0, 20)
        icon.Position = UDim2.new(0, 20, 0.5, -10)
        icon.Text = "üìÑ"
        icon.TextColor3 = colors.text
        icon.BackgroundTransparency = 1
        icon.Font = Enum.Font.Gotham
        icon.TextSize = 14
        icon.Parent = itemFrame
        
        local nameLabel = Instance.new("TextButton")
        nameLabel.Size = UDim2.new(1, -40, 1, 0)
        nameLabel.Position = UDim2.new(0, 40, 0, 0)
        nameLabel.Text = element.Name .. " (" .. element.ClassName .. ")"
        nameLabel.TextColor3 = element == selectedElement and colors.primary or colors.text
        nameLabel.BackgroundTransparency = 1
        nameLabel.Font = Enum.Font.Gotham
        nameLabel.TextSize = 14
        nameLabel.TextXAlignment = Enum.TextXAlignment.Left
        nameLabel.Parent = itemFrame
        
        -- Select element on click
        nameLabel.MouseButton1Click:Connect(function()
            selectElement(element)
        end)
        
        -- Expand/collapse children
        local childrenVisible = false
        local childrenContainer = Instance.new("Frame")
        childrenContainer.Size = UDim2.new(1, 0, 0, 0)
        childrenContainer.Position = UDim2.new(0, 0, 1, 0)
        childrenContainer.BackgroundTransparency = 1
        childrenContainer.Visible = false
        childrenContainer.Parent = itemFrame
        
        expandButton.MouseButton1Click:Connect(function()
            childrenVisible = not childrenVisible
            childrenContainer.Visible = childrenVisible
            
            if childrenVisible then
                expandButton.Text = "‚ñº"
                for _, child in ipairs(element:GetChildren()) do
                    createTreeItem(child, depth + 1, childrenContainer)
                end
            else
                expandButton.Text = "‚ñ∂"
                childrenContainer:ClearAllChildren()
            end
        end)
    end
    
    -- Add UI Canvas to explorer
    createTreeItem(uiCanvas, 0, explorerScroll)
    
    -- Add children of UI Canvas
    for _, element in ipairs(uiCanvas:GetChildren()) do
        createTreeItem(element, 1, explorerScroll)
    end
end

-- Property Editor
local propertiesContent = tabContents["Properties"]
local propertyGrid = Instance.new("ScrollingFrame")
propertyGrid.Name = "PropertyGrid"
propertyGrid.Size = UDim2.new(1, 0, 1, -40)
propertyGrid.BackgroundTransparency = 1
propertyGrid.ScrollBarThickness = 8
propertyGrid.CanvasSize = UDim2.new(0, 0, 0, 0)
propertyGrid.AutomaticCanvasSize = Enum.AutomaticSize.Y
propertyGrid.Parent = propertiesContent

local elementNameBox = Instance.new("TextBox")
elementNameBox.Name = "ElementName"
elementNameBox.Size = UDim2.new(1, -20, 0, 30)
elementNameBox.Position = UDim2.new(0, 10, 1, -35)
elementNameBox.PlaceholderText = "Element name"
elementNameBox.Text = ""
elementNameBox.TextColor3 = colors.text
elementNameBox.BackgroundColor3 = colors.propertyItem
elementNameBox.Font = Enum.Font.Gotham
elementNameBox.TextSize = 14
elementNameBox.Parent = propertiesContent

local nameCorner = Instance.new("UICorner")
nameCorner.CornerRadius = UDim.new(0, 6)
nameCorner.Parent = elementNameBox

-- Function to refresh properties
function refreshProperties()
    propertyGrid:ClearAllChildren()
    
    if not selectedElement then
        elementNameBox.Text = ""
        return
    end
    
    elementNameBox.Text = selectedElement.Name
    
    -- Update name when changed
    elementNameBox.FocusLost:Connect(function()
        selectedElement.Name = elementNameBox.Text
        refreshExplorer()
    end)
    
    -- Common properties for all GUI objects
    local commonProperties = {
        "Name", "Size", "Position", "AnchorPoint", "Rotation", "BackgroundColor3", 
        "BackgroundTransparency", "BorderColor3", "BorderSizePixel", "Visible", "ZIndex"
    }
    
    local yPos = 0
    
    -- Property header
    local header = Instance.new("Frame")
    header.Size = UDim2.new(1, 0, 0, 30)
    header.Position = UDim2.new(0, 0, 0, yPos)
    header.BackgroundColor3 = colors.propertyHeader
    header.Parent = propertyGrid
    
    local headerText = Instance.new("TextLabel")
    headerText.Size = UDim2.new(1, -10, 1, 0)
    headerText.Position = UDim2.new(0, 10, 0, 0)
    headerText.Text = "PROPERTIES (" .. selectedElement.ClassName .. ")"
    headerText.TextColor3 = colors.primary
    headerText.BackgroundTransparency = 1
    headerText.Font = Enum.Font.GothamBold
    headerText.TextSize = 14
    headerText.TextXAlignment = Enum.TextXAlignment.Left
    headerText.Parent = header
    
    yPos = yPos + 35
    
    -- Create property editors
    for _, propName in ipairs(commonProperties) do
        if selectedElement[propName] ~= nil then
            yPos = createPropertyEditor(propName, selectedElement[propName], yPos)
        end
    end
    
    -- Text-specific properties
    if selectedElement:IsA("TextLabel") or selectedElement:IsA("TextButton") or selectedElement:IsA("TextBox") then
        local textProperties = {"Text", "TextColor3", "TextSize", "Font", "TextScaled", "TextWrapped"}
        for _, propName in ipairs(textProperties) do
            if selectedElement[propName] ~= nil then
                yPos = createPropertyEditor(propName, selectedElement[propName], yPos)
            end
        end
    end
    
    -- Image-specific properties
    if selectedElement:IsA("ImageLabel") or selectedElement:IsA("ImageButton") then
        local imageProperties = {"Image", "ImageColor3", "ImageTransparency", "ScaleType", "SliceCenter"}
        for _, propName in ipairs(imageProperties) do
            if selectedElement[propName] ~= nil then
                yPos = createPropertyEditor(propName, selectedElement[propName], yPos)
            end
        end
    end
    
    -- ScrollingFrame properties
    if selectedElement:IsA("ScrollingFrame") then
        local scrollProperties = {"CanvasSize", "ScrollBarThickness", "ScrollBarImageColor3", "ScrollBarImageTransparency"}
        for _, propName in ipairs(scrollProperties) do
            if selectedElement[propName] ~= nil then
                yPos = createPropertyEditor(propName, selectedElement[propName], yPos)
            end
        end
    end
end

-- Create property editor control
function createPropertyEditor(propName, propValue, yPos)
    local propFrame = Instance.new("Frame")
    propFrame.Size = UDim2.new(1, 0, 0, 30)
    propFrame.Position = UDim2.new(0, 0, 0, yPos)
    propFrame.BackgroundTransparency = 1
    propFrame.Parent = propertyGrid
    
    local propLabel = Instance.new("TextLabel")
    propLabel.Size = UDim2.new(0.4, -5, 1, 0)
    propLabel.Position = UDim2.new(0, 0, 0, 0)
    propLabel.Text = propName
    propLabel.TextColor3 = colors.text
    propLabel.BackgroundTransparency = 1
    propLabel.Font = Enum.Font.Gotham
    propLabel.TextSize = 14
    propLabel.TextXAlignment = Enum.TextXAlignment.Left
    propLabel.Parent = propFrame
    
    local propInput = nil
    
    -- Create appropriate input based on property type
    if typeof(propValue) == "number" then
        propInput = Instance.new("TextBox")
        propInput.Size = UDim2.new(0.6, -5, 1, 0)
        propInput.Position = UDim2.new(0.4, 0, 0, 0)
        propInput.Text = tostring(propValue)
        propInput.TextColor3 = colors.text
        propInput.BackgroundColor3 = colors.propertyItem
        propInput.Font = Enum.Font.Gotham
        propInput.TextSize = 14
        
        propInput.FocusLost:Connect(function()
            local success, value = pcall(function()
                return tonumber(propInput.Text)
            end)
            
            if success and value then
                selectedElement[propName] = value
            else
                propInput.Text = tostring(selectedElement[propName])
            end
        end)
    elseif typeof(propValue) == "boolean" then
        propInput = Instance.new("TextButton")
        propInput.Size = UDim2.new(0.6, -5, 1, 0)
        propInput.Position = UDim2.new(0.4, 0, 0, 0)
        propInput.Text = tostring(propValue)
        propInput.TextColor3 = colors.text
        propInput.BackgroundColor3 = colors.propertyItem
        propInput.Font = Enum.Font.Gotham
        propInput.TextSize = 14
        
        propInput.MouseButton1Click:Connect(function()
            selectedElement[propName] = not selectedElement[propName]
            propInput.Text = tostring(selectedElement[propName])
        end)
    elseif typeof(propValue) == "string" then
        propInput = Instance.new("TextBox")
        propInput.Size = UDim2.new(0.6, -5, 1, 0)
        propInput.Position = UDim2.new(0.4, 0, 0, 0)
        propInput.Text = propValue
        propInput.TextColor3 = colors.text
        propInput.BackgroundColor3 = colors.propertyItem
        propInput.Font = Enum.Font.Gotham
        propInput.TextSize = 14
        
        propInput.FocusLost:Connect(function()
            selectedElement[propName] = propInput.Text
        end)
    elseif typeof(propValue) == "Color3" then
        propInput = Instance.new("TextButton")
        propInput.Size = UDim2.new(0.6, -5, 1, 0)
        propInput.Position = UDim2.new(0.4, 0, 0, 0)
        propInput.Text = ""
        propInput.BackgroundColor3 = propValue
        
        propInput.MouseButton1Click:Connect(function()
            -- Create color picker popup
            local colorPicker = createGlassFrame(designerGui, UDim2.new(0, 200, 0, 250), UDim2.new(0.5, -100, 0.5, -125), 0)
            colorPicker.ZIndex = 100
            
            -- Add color picker UI here (simplified for this example)
            local closeBtn = Instance.new("TextButton")
            closeBtn.Size = UDim2.new(0, 30, 0, 30)
            closeBtn.Position = UDim2.new(1, -35, 0, 5)
            closeBtn.Text = "‚úï"
            closeBtn.TextColor3 = colors.text
            closeBtn.BackgroundColor3 = colors.accent
            closeBtn.Font = Enum.Font.GothamBold
            closeBtn.TextSize = 14
            closeBtn.Parent = colorPicker
            
            closeBtn.MouseButton1Click:Connect(function()
                colorPicker:Destroy()
            end)
            
            -- Actual color picker implementation would go here
        end)
    elseif typeof(propValue) == "UDim2" then
        local xInput = Instance.new("TextBox")
        xInput.Size = UDim2.new(0.3, -5, 1, 0)
        xInput.Position = UDim2.new(0.4, 0, 0, 0)
        xInput.Text = string.format("X: %.1f, %d", propValue.X.Scale, propValue.X.Offset)
        xInput.TextColor3 = colors.text
        xInput.BackgroundColor3 = colors.propertyItem
        xInput.Font = Enum.Font.Gotham
        xInput.TextSize = 12
        xInput.Parent = propFrame
        
        local yInput = Instance.new("TextBox")
        yInput.Size = UDim2.new(0.3, -5, 1, 0)
        yInput.Position = UDim2.new(0.7, 0, 0, 0)
        yInput.Text = string.format("Y: %.1f, %d", propValue.Y.Scale, propValue.Y.Offset)
        yInput.TextColor3 = colors.text
        yInput.BackgroundColor3 = colors.propertyItem
        yInput.Font = Enum.Font.Gotham
        yInput.TextSize = 12
        yInput.Parent = propFrame
        
        -- Add change handlers
    else
        propInput = Instance.new("TextLabel")
        propInput.Size = UDim2.new(0.6, -5, 1, 0)
        propInput.Position = UDim2.new(0.4, 0, 0, 0)
        propInput.Text = tostring(propValue)
        propInput.TextColor3 = Color3.fromRGB(180, 180, 180)
        propInput.BackgroundTransparency = 1
        propInput.Font = Enum.Font.Gotham
        propInput.TextSize = 14
        propInput.TextXAlignment = Enum.TextXAlignment.Left
    end
    
    if propInput then
        propInput.Parent = propFrame
        local inputCorner = Instance.new("UICorner")
        inputCorner.CornerRadius = UDim.new(0, 6)
        inputCorner.Parent = propInput
    end
    
    return yPos + 35
end

-- Set up scripts tab
local scriptsContent = tabContents["Scripts"]
local scriptEditor = Instance.new("ScrollingFrame")
scriptEditor.Name = "ScriptEditor"
scriptEditor.Size = UDim2.new(1, -20, 1, -100)
scriptEditor.Position = UDim2.new(0, 10, 0, 10)
scriptEditor.BackgroundColor3 = Color3.fromRGB(30, 35, 45)
scriptEditor.BorderSizePixel = 0
scriptEditor.ScrollBarThickness = 8
scriptEditor.CanvasSize = UDim2.new(0, 0, 0, 0)
scriptEditor.AutomaticCanvasSize = Enum.AutomaticSize.Y
scriptEditor.Parent = scriptsContent

local scriptInput = Instance.new("TextBox")
scriptInput.Name = "ScriptInput"
scriptInput.Size = UDim2.new(1, -10, 1, -10)
scriptInput.Position = UDim2.new(0, 5, 0, 5)
scriptInput.Text = "-- Add your script here\n-- Use 'element' to reference the selected element\nprint(\"Button clicked!\")\nelement.Text = \"Clicked!\""
scriptInput.TextColor3 = colors.text
scriptInput.BackgroundTransparency = 1
scriptInput.TextXAlignment = Enum.TextXAlignment.Left
scriptInput.TextYAlignment = Enum.TextYAlignment.Top
scriptInput.Font = Enum.Font.Code
scriptInput.TextSize = 14
scriptInput.TextWrapped = true
scriptInput.MultiLine = true
scriptInput.ClearTextOnFocus = false
scriptInput.Parent = scriptEditor

local applyScriptBtn = Instance.new("TextButton")
applyScriptBtn.Size = UDim2.new(1, -40, 0, 40)
applyScriptBtn.Position = UDim2.new(0, 20, 1, -80)
applyScriptBtn.Text = "üíæ APPLY SCRIPT TO ELEMENT"
applyScriptBtn.TextColor3 = colors.text
applyScriptBtn.BackgroundColor3 = colors.success
applyScriptBtn.BorderSizePixel = 0
applyScriptBtn.Font = Enum.Font.GothamBold
applyScriptBtn.TextSize = 14
applyScriptBtn.Parent = scriptsContent

local applyCorner = Instance.new("UICorner")
applyCorner.CornerRadius = UDim.new(0, 8)
applyCorner.Parent = applyScriptBtn

applyScriptBtn.MouseEnter:Connect(function()
    TweenService:Create(applyScriptBtn, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(100, 255, 180)}):Play()
end)

applyScriptBtn.MouseLeave:Connect(function()
    TweenService:Create(applyScriptBtn, TweenInfo.new(0.2), {BackgroundColor3 = colors.success}):Play()
end)

applyScriptBtn.MouseButton1Click:Connect(function()
    if selectedElement then
        local scriptText = scriptInput.Text
        
        -- Remove any existing script
        for _, child in ipairs(selectedElement:GetChildren()) do
            if child:IsA("LocalScript") and child.Name == "CustomScript" then
                child:Destroy()
            end
        end
        
        -- Create a new script for the element
        local elementScript = Instance.new("LocalScript")
        elementScript.Name = "CustomScript"
        elementScript.Source = string.format([[
            local element = script.Parent
            
            %s
        ]], scriptText)
        
        elementScript.Parent = selectedElement
        
        -- Notification
        showNotification("‚úÖ Script applied to " .. selectedElement.Name)
    else
        showNotification("‚ö†Ô∏è Please select an element first")
    end
end)

-- Export functionality
local exportContent = tabContents["Export"]
local exportOptions = createGlassFrame(exportContent, UDim2.new(1, -40, 0, 300), UDim2.new(0, 20, 0, 20))
exportOptions.BackgroundTransparency = 0.05

local exportTitle = Instance.new("TextLabel")
exportTitle.Size = UDim2.new(1, -20, 0, 40)
exportTitle.Position = UDim2.new(0, 10, 0, 10)
exportTitle.Text = "Export Options"
exportTitle.TextColor3 = colors.primary
exportTitle.BackgroundTransparency = 1
exportTitle.Font = Enum.Font.GothamBold
exportTitle.TextSize = 20
exportTitle.Parent = exportOptions

local exportDesc = Instance.new("TextLabel")
exportDesc.Size = UDim2.new(1, -20, 0, 50)
exportDesc.Position = UDim2.new(0, 10, 0, 50)
exportDesc.Text = "Export your UI design as a script that can be executed to recreate your interface."
exportDesc.TextColor3 = colors.text
exportDesc.BackgroundTransparency = 1
exportDesc.Font = Enum.Font.Gotham
exportDesc.TextSize = 14
exportDesc.TextWrapped = true
exportDesc.TextXAlignment = Enum.TextXAlignment.Left
exportDesc.Parent = exportOptions

local formatLabel = Instance.new("TextLabel")
formatLabel.Size = UDim2.new(1, -20, 0, 30)
formatLabel.Position = UDim2.new(0, 10, 0, 110)
formatLabel.Text = "Export Format:"
formatLabel.TextColor3 = colors.text
formatLabel.BackgroundTransparency = 1
formatLabel.Font = Enum.Font.GothamBold
formatLabel.TextSize = 16
formatLabel.TextXAlignment = Enum.TextXAlignment.Left
formatLabel.Parent = exportOptions

local formatDropdown = Instance.new("TextButton")
formatDropdown.Size = UDim2.new(0.5, -10, 0, 30)
formatDropdown.Position = UDim2.new(0, 10, 0, 140)
formatDropdown.Text = "Roblox Lua"
formatDropdown.TextColor3 = colors.text
formatDropdown.BackgroundColor3 = colors.propertyItem
formatDropdown.Font = Enum.Font.Gotham
formatDropdown.TextSize = 14
formatDropdown.TextXAlignment = Enum.TextXAlignment.Left
formatDropdown.Parent = exportOptions

local dropdownCorner = Instance.new("UICorner")
dropdownCorner.CornerRadius = UDim.new(0, 6)
dropdownCorner.Parent = formatDropdown

local dropdownArrow = Instance.new("TextLabel")
dropdownArrow.Size = UDim2.new(0, 20, 0, 20)
dropdownArrow.Position = UDim2.new(1, -25, 0.5, -10)
dropdownArrow.Text = "‚ñº"
dropdownArrow.TextColor3 = colors.text
dropdownArrow.BackgroundTransparency = 1
dropdownArrow.Font = Enum.Font.Gotham
dropdownArrow.TextSize = 14
dropdownArrow.Parent = formatDropdown

local exportBtn = Instance.new("TextButton")
exportBtn.Size = UDim2.new(1, -40, 0, 40)
exportBtn.Position = UDim2.new(0, 20, 0, 190)
exportBtn.Text = "üíæ EXPORT UI DESIGN"
exportBtn.TextColor3 = colors.text
exportBtn.BackgroundColor3 = colors.success
exportBtn.Font = Enum.Font.GothamBold
exportBtn.TextSize = 14
exportBtn.Parent = exportOptions

local exportCorner = Instance.new("UICorner")
exportCorner.CornerRadius = UDim.new(0, 8)
exportCorner.Parent = exportBtn

exportBtn.MouseEnter:Connect(function()
    TweenService:Create(exportBtn, TweenInfo.new(0.2), {BackgroundColor3 = Color3.fromRGB(100, 255, 180)}):Play()
end)

exportBtn.MouseLeave:Connect(function()
    TweenService:Create(exportBtn, TweenInfo.new(0.2), {BackgroundColor3 = colors.success}):Play()
end)

exportBtn.MouseButton1Click:Connect(function()
    local exportScript = exportUI()
    
    -- Create a folder if it doesn't exist
    local folderName = "DesignerPro"
    if not isfolder(folderName) then
        makefolder(folderName)
    end
    
    -- Create a unique filename
    local fileName = folderName .. "/ExportedUI_" .. os.time() .. ".lua"
    writefile(fileName, exportScript)
    
    -- Notification
    showNotification("‚úÖ UI exported to: " .. fileName)
end)

-- Export UI to Lua code
function exportUI()
    if not uiCanvas then
        return "No UI elements to export"
    end
    
    local exportScript = "-- UI Designer Pro Export\n"
    exportScript = exportScript .. "local Players = game:GetService(\"Players\")\n"
    exportScript = exportScript .. "local player = Players.LocalPlayer\n"
    exportScript = exportScript .. "local playerGui = player:WaitForChild(\"PlayerGui\")\n\n"
    exportScript = exportScript .. "local screenGui = Instance.new(\"ScreenGui\")\n"
    exportScript = exportScript .. "screenGui.Name = \"ExportedUI\"\n"
    exportScript = exportScript .. "screenGui.ResetOnSpawn = false\n"
    exportScript = exportScript .. "screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling\n"
    exportScript = exportScript .. "screenGui.Parent = playerGui\n\n"
    
    local function serializeProperties(element, indent)
        local props = ""
        local indentStr = string.rep("    ", indent)
        
        -- Common properties
        props = props .. indentStr .. "obj.Name = \"" .. element.Name .. "\"\n"
        
        if element:IsA("GuiObject") then
            props = props .. indentStr .. string.format("obj.Size = UDim2.new(%.2f, %d, %.2f, %d)\n", 
                element.Size.X.Scale, element.Size.X.Offset,
                element.Size.Y.Scale, element.Size.Y.Offset)
                
            props = props .. indentStr .. string.format("obj.Position = UDim2.new(%.2f, %d, %.2f, %d)\n", 
                element.Position.X.Scale, element.Position.X.Offset,
                element.Position.Y.Scale, element.Position.Y.Offset)
                
            props = props .. indentStr .. string.format("obj.BackgroundColor3 = Color3.new(%.3f, %.3f, %.3f)\n", 
                element.BackgroundColor3.R, element.BackgroundColor3.G, element.BackgroundColor3.B)
                
            props = props .. indentStr .. string.format("obj.BackgroundTransparency = %.2f\n", element.BackgroundTransparency)
            props = props .. indentStr .. "obj.BorderSizePixel = " .. tostring(element.BorderSizePixel) .. "\n"
            props = props .. indentStr .. "obj.Visible = " .. tostring(element.Visible) .. "\n"
            props = props .. indentStr .. "obj.ZIndex = " .. tostring(element.ZIndex) .. "\n"
        end
        
        -- Text-specific properties
        if element:IsA("TextLabel") or element:IsA("TextButton") or element:IsA("TextBox") then
            props = props .. indentStr .. "obj.Text = \"" .. element.Text:gsub("\"", "\\\"") .. "\"\n"
            props = props .. indentStr .. string.format("obj.TextColor3 = Color3.new(%.3f, %.3f, %.3f)\n", 
                element.TextColor3.R, element.TextColor3.G, element.TextColor3.B)
            props = props .. indentStr .. "obj.TextSize = " .. tostring(element.TextSize) .. "\n"
            props = props .. indentStr .. "obj.Font = Enum.Font." .. tostring(element.Font) .. "\n"
            props = props .. indentStr .. "obj.TextScaled = " .. tostring(element.TextScaled) .. "\n"
            props = props .. indentStr .. "obj.TextWrapped = " .. tostring(element.TextWrapped) .. "\n"
        end
        
        -- Image-specific properties
        if element:IsA("ImageLabel") or element:IsA("ImageButton") then
            props = props .. indentStr .. "obj.Image = \"" .. element.Image .. "\"\n"
            props = props .. indentStr .. string.format("obj.ImageColor3 = Color3.new(%.3f, %.3f, %.3f)\n", 
                element.ImageColor3.R, element.ImageColor3.G, element.ImageColor3.B)
            props = props .. indentStr .. "obj.ImageTransparency = " .. tostring(element.ImageTransparency) .. "\n"
            props = props .. indentStr .. "obj.ScaleType = Enum.ScaleType." .. tostring(element.ScaleType) .. "\n"
        end
        
        -- ScrollingFrame properties
        if element:IsA("ScrollingFrame") then
            props = props .. indentStr .. string.format("obj.CanvasSize = UDim2.new(%.2f, %d, %.2f, %d)\n", 
                element.CanvasSize.X.Scale, element.CanvasSize.X.Offset,
                element.CanvasSize.Y.Scale, element.CanvasSize.Y.Offset)
            props = props .. indentStr .. "obj.ScrollBarThickness = " .. tostring(element.ScrollBarThickness) .. "\n"
        end
        
        return props
    end
    
    local function processElement(element, indent, parentName)
        indent = indent or 0
        local indentStr = string.rep("    ", indent)
        local elementName = element.Name:gsub("%s", "_")
        
        -- Create instance
        exportScript = exportScript .. indentStr .. "local " .. elementName .. " = Instance.new(\"" .. element.ClassName .. "\")\n"
        exportScript = exportScript .. serializeProperties(element, indent)
        
        -- Set parent
        if parentName then
            exportScript = exportScript .. indentStr .. elementName .. ".Parent = " .. parentName .. "\n"
        else
            exportScript = exportScript .. indentStr .. elementName .. ".Parent = screenGui\n"
        end
        
        -- Process children
        for _, child in ipairs(element:GetChildren()) do
            processElement(child, indent + 1, elementName)
        end
        
        exportScript = exportScript .. "\n"
    end
    
    -- Process all top-level elements
    for _, element in ipairs(uiCanvas:GetChildren()) do
        processElement(element, 0)
    end
    
    return exportScript
end

-- Notification system
function showNotification(message)
    local notification = Instance.new("TextLabel")
    notification.Text = message
    notification.Size = UDim2.new(0.7, 0, 0, 40)
    notification.Position = UDim2.new(0.15, 0, 0.1, 0)
    notification.BackgroundColor3 = colors.primary
    notification.TextColor3 = colors.text
    notification.Font = Enum.Font.GothamBold
    notification.TextSize = 14
    notification.Parent = designerGui
    
    local notifCorner = Instance.new("UICorner")
    notifCorner.CornerRadius = UDim.new(0, 8)
    notifCorner.Parent = notification
    
    delay(3, function()
        if notification then
            TweenService:Create(notification, TweenInfo.new(0.3), {Position = UDim2.new(0.15, 0, -0.1, 0)}):Play()
            delay(0.3, function()
                notification:Destroy()
            end)
        end
    end)
end

-- Keyboard shortcuts
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    
    if input.KeyCode == Enum.KeyCode.Delete and selectedElement then
        selectedElement:Destroy()
        selectedElement = nil
        refreshExplorer()
    elseif input.KeyCode == Enum.KeyCode.F1 then
        mainContainer.Visible = not mainContainer.Visible
    elseif input.KeyCode == Enum.KeyCode.Escape then
        selectElement(nil)
    end
end)

-- Initial notification
showNotification("üé® UI DESIGNER PRO LOADED! PRESS F1 TO TOGGLE")

-- Mobile compatibility
if UserInputService.TouchEnabled then
    -- Increase sizes for mobile
    mainContainer.Size = UDim2.new(0, 700, 0, 700)
    mainContainer.Position = UDim2.new(0.5, -350, 0.5, -350)
    dragHandleSize = 30
    
    -- Increase button sizes
    for _, button in pairs(controlButtons:GetChildren()) do
        if button:IsA("TextButton") then
            button.Size = UDim2.new(0, 50, 0, 50)
        end
    end
    
    -- Increase font sizes
    titleText.TextSize = 20
    for name, button in pairs(tabButtons) do
        button.TextSize = 28
        button.Size = UDim2.new(0.8, 0, 0, 70)
    end
end

-- Make the script return something useful
return {
    gui = designerGui,
    selectElement = function(element)
        selectElement(element)
        switchTab("Properties")
    end,
    getSelectedElement = function()
        return selectedElement
    end,
    exportUI = exportUI
}
